[project]
name = "lead-scoring-model"
version = "0.1.0"
description = "Production-ready lead scoring API using XGBoost"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "aiohttp>=3.8.0",
    "awswrangler>=3.5.0",
    "boto3>=1.40.14",
    "fastapi>=0.116.1",
    "joblib>=1.5.1",
    "matplotlib>=3.10.5",
    "numpy>=2.2.6",
    "pandas>=2.3.2",
    "psutil>=6.1.0",
    "pydantic-settings>=2.10.1",
    "scikit-learn>=1.7.1",
    "structlog>=25.4.0",
    "uvicorn>=0.35.0",
    "watchtower>=3.0.1",
    "xgboost>=3.0.4",
]

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "black>=25.1.0",
    "httpx>=0.27.0",
    "mypy>=1.17.1",
    "pandas-stubs>=2.3.0.250703",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pyyaml>=6.0.2",
    "ruff>=0.12.9",
]

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
target-version = ['py310']
line-length = 88

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --disable-warnings"
testpaths = [
    "tests",
]
pythonpath = [
    "."
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/__pycache__/*", "*/site-packages/*"]

[tool.coverage.report]
fail_under = 75
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
